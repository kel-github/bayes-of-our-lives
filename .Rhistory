? pivot_longer
sw_dat_var <- data.frame(sub = rep(sub_idx, times = sw_var_t_idxs),
ses = rep(names(sw_var_t_idxs), times = sw_var_t_idxs),
vars = unlist(lapply(paste(unique(sub_idx)), function(x) unlist(sw_dat_var[x]))))
head(sw_dat_var)
sw_dat_var %>% mutate(session = if_else(ses == "on_stays"  | ses == "on_switches", "on", "off"))
sw_dat_var <- sw_dat_var %>% mutate(session = if_else(ses == "on_stays"  | ses == "on_switches", "on", "off")) %>%
mutate(cond = if_else(ses == "on_stays"  | ses == "off_stays", "stays", "switches"))
View(sw_dat_var)
sapply(sw_var_tidxs, function(x) 1:x)
sapply(sw_var_t_idxs, function(x) 1:x)
sw_dat <- lapply(unique(sub_idx), function(x) extract_ps_by_trial_hist(sub_ps[sub_idx == x],
ses_idx[sub_idx == x]))
names(sw_dat) <- unique(sub_idx)
sw_dat_var <- lapply(unique(sub_idx), function(x) sapply(paste(rep(c("on", "off"), times = 2),
rep(c("stays", "switches"), each = 2),
sep = "_"), function(y) apply(sw_dat[[paste(x)]][[y]], 2, var)))
names(sw_dat_var) <- unique(sub_idx)
# now get idxs of each set of data
sw_var_t_idxs <- unlist(lapply(paste(unique(sub_idx)), function(x) lapply(sw_dat_var[[x]], length)))
sw_dat_var <- data.frame(sub = rep(sub_idx, times = sw_var_t_idxs),
ses = rep(names(sw_var_t_idxs), times = sw_var_t_idxs),
t = unlist(sapply(sw_var_t_idxs, function(x) 1:x)),
vars = unlist(lapply(paste(unique(sub_idx)), function(x) unlist(sw_dat_var[x]))))
sw_dat_var <- sw_dat_var %>% mutate(session = if_else(ses == "on_stays"  | ses == "on_switches", "on", "off")) %>%
mutate(cond = if_else(ses == "on_stays"  | ses == "off_stays", "stays", "switches"))
View(sw_dat_var)
sw_dat_var <- sw_dat_var %>% mutate(session = if_else(ses == "on_stays"  | ses == "on_switches", "on", "off")) %>%
mutate(cond = if_else(ses == "on_stays"  | ses == "off_stays", "stays", "switches")) %>%
na.rm()
sw_dat_var <- sw_dat_var %>% mutate(session = if_else(ses == "on_stays"  | ses == "on_switches", "on", "off")) %>%
mutate(cond = if_else(ses == "on_stays"  | ses == "off_stays", "stays", "switches")) %>%
drop_na()
# now plot each sub and session, stay vs switch, by trial
sw_dat_var %>% ggplot(aes(x = t, y=vars, col=cond, group=cond)) +
geom_line() +
facet_wrap(~sub*sess)
# now plot each sub and session, stay vs switch, by trial
sw_dat_var %>% ggplot(aes(x = t, y=vars, col=cond, group=cond)) +
geom_line() +
facet_wrap(~sub*session)
head(sw_dat_var)
sw_dat_var %>% ggplot(aes(x=cond, y=vars, col=cond)) +
geom_violin() +
geom_boxplot(width = 0.1, colour = "grey", alpha = 0.5) +
facet_wrap(~sub*session)
rm(list=ls())
setwd("~/Insync/documents/mcmc_bayesian_stats/")
# Week 4 8H
# Common models and multiple factor ANOVA
# -------------------------------------------------------
library(car)
load(Anscombe)
data(Anscombe)
Anscombe
library("car")
data("Anscombe")
head(Anscombe)
?Anscombe
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
data_jags
Xc
Xc
Xc[,"education"]
t(Xc[,"education"])
Xc[,"income"]
# Week 4 8H
# Common models and multiple factor ANOVA
# -------------------------------------------------------
library("car")
data("Anscombe")
head(Anscombe)
?Anscombe
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Xc[,"education"],
income = Xc[,"income"],
young = Xc[,"young"],
urban = Xc[,"urban"])
params = c("b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=rgamma(1,1.0,1.0))
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
gelman.diag(mod_sim)
autocorr.diag(mod_sim)
effectiveSize(mod_sim)
plot(mod_sim)
library("rjags")
#.0/2.0, 1.0*1500.0/2.0)
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0)
}
prec ~ dgamma(1, 1)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Xc[,"education"],
income = Xc[,"income"],
young = Xc[,"young"],
urban = Xc[,"urban"])
params = c("b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=rgamma(1,1.0,1.0))
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
gelman.diag(mod_sim)
autocorr.diag(mod_sim)
effectiveSize(mod_sim)
library("car")
data("Anscombe")
head(Anscombe)
?Anscombe
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Xc[,"education"],
income = Xc[,"income"],
young = Xc[,"young"],
urban = Xc[,"urban"])
params = c("b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=1)
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
rgamma(1,1,1)
rgamma(1,1,1)
rgamma(1,1,1)
rgamma(1,1,1)
gelman.diag(mod_sim)
autocorr.diag(mod_sim)
effectiveSize(mod_sim)
## set up data and model
library("car")  # load the 'car' package
data("Anscombe")  # load the data set
?Anscombe  # read a description of the data
head(Anscombe)  # look at the first few lines of the data
pairs(Anscombe)  # scatter plots for each pair of variables
summary(lm(education~income+young+urban, data= Anscombe))
modlm = lm(education~income+young+urban, data= Anscombe)
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b0 + b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
b0 ~ dnorm(0.0, 1.0/1.0e6)
for (i in 1:3) {
b[i] ~ dnorm(0.0, 1.0/1.0e6)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Anscombe$education,
income = Anscombe$income,
young = Anscombe$young,
urban = Anscombe$urban)
params = c("b0", "b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=rgamma(1,1.0,1.0),
"b0" = rnorm(1, 0, 100))
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
# Week 4 8H
# Common models and multiple factor ANOVA
# -------------------------------------------------------
library("car")
data("Anscombe")
head(Anscombe)
?Anscombe
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0)
}
prec ~ dgamma(1.0/2.0, 1.0*1500.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Xc[,"education"],
income = Xc[,"income"],
young = Xc[,"young"],
urban = Xc[,"urban"])
params = c("b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=1)
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
library("car")
data("Anscombe")
head(Anscombe)
?Anscombe
Xc = scale(Anscombe, center=TRUE, scale=TRUE)
str(Xc)
data_jags = as.list(data.frame(Xc))
library("rjags")
mod_string = " model {
for (i in 1:length(education)) {
education[i] ~ dnorm(mu[i], prec)
mu[i] = b[1]*income[i] + b[2]*young[i] + b[3]*urban[i]
}
for (i in 1:3) {
b[i] ~ ddexp(0.0, 1.0)
}
prec ~ dgamma(1.0/2.0, 1.0/2.0)
## Initial guess of variance based on overall
## variance of education variable. Uses low prior
## effective sample size. Technically, this is not
## a true 'prior', but it is not very informative.
sig2 = 1.0 / prec
sig = sqrt(sig2)
} "
set.seed(42)
data_jags = list(education = Xc[,"education"],
income = Xc[,"income"],
young = Xc[,"young"],
urban = Xc[,"urban"])
params = c("b", "sig")
init = function(){
inits = list("b" = rnorm(3, 0, 100), "prec"=1)
}
mod = jags.model(textConnection(mod_string), data=data_jags,
inits = init, n.chains = 4)
update(mod, 1000)
mod_sim = coda.samples(model=mod, variable.names = params,
n.iter=5e3)
mod_csim = do.call(rbind, mod_sim)
# model checking
plot(mod_sim)
matrix(runif(4), nrow = 2)
1/matrix(runif(4), nrow = 2)
data("warpbreaks")
?warpbreaks
head(warpbreaks)
library("rjags")
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[i])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_sim = coda.samples(model=mod3,
variable.names=params3,
n.iter=5e3)
mod3_csim = as.mcmc(do.call(rbind, mod3_sim))
plot(mod3_sim, ask=TRUE)
rm(list=ls())
data("warpbreaks")
?warpbreaks
head(warpbreaks)
library("rjags")
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[i])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[[woolGrp[i], tensGrp[i]])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
library("rjags")
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[[woolGrp[i], tensGrp[i]]])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[[woolGrp[i], tensGrp[i]])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
library("rjags")
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[woolGrp[i], tensGrp[i]])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_sim = coda.samples(model=mod3,
variable.names=params3,
n.iter=5e3)
mod3_csim = as.mcmc(do.call(rbind, mod3_sim))
plot(mod3_sim, ask=TRUE)
dic.samples(mod3_sim, n.iter=100000)
dic.samples(mod3_csim, n.iter=100000)
rm(list=ls())
data("warpbreaks")
?warpbreaks
head(warpbreaks)
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec)
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
}
}
prec ~ dgamma(3/2.0, 3*1.0/2.0)
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_sim = coda.samples(model=mod3,
variable.names=params3,
n.iter=5e3)
mod3_csim = as.mcmc(do.call(rbind, mod3_sim))
plot(mod3_sim, ask=TRUE)
(dic3 = dic.samples(mod3, n.iter=1e3))
rm(list=ls())
data("warpbreaks")
?warpbreaks
head(warpbreaks)
library("rjags")
mod3_string = " model {
for( i in 1:length(y)) {
y[i] ~ dnorm(mu[woolGrp[i], tensGrp[i]], prec[woolGrp[i], tensGrp[i]])
}
for (j in 1:max(woolGrp)) {
for (k in 1:max(tensGrp)) {
mu[j,k] ~ dnorm(0.0, 1.0/1.0e6)
prec[j,k] ~ dgamma(1.0/2.0, 1.0/2.0)
}
}
sig = sqrt(1.0 / prec)
} "
str(warpbreaks)
data3_jags = list(y=log(warpbreaks$breaks), woolGrp=as.numeric(warpbreaks$wool), tensGrp=as.numeric(warpbreaks$tension))
params3 = c("mu", "sig")
mod3 = jags.model(textConnection(mod3_string), data=data3_jags, n.chains=3)
update(mod3, 1e3)
mod3_sim = coda.samples(model=mod3,
variable.names=params3,
n.iter=5e3)
mod3_csim = as.mcmc(do.call(rbind, mod3_sim))
plot(mod3_sim, ask=TRUE)
dic3
(dic3 = dic.samples(mod3, n.iter=1e3))
